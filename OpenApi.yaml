openapi: 3.0.3
info:
  title: Spring Boot Application - OpenAPI 3.0
  description: |-
    Spring Boot Application - Articles && Users
  termsOfService: http://swagger.io/terms/
  contact:
    email: ram0973@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://backend.yabbarov.ru/api/v1
tags:
  - name: articles
    description: Operations with Articles (Markdown)
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: users
    description: Operations with users
paths:
  /articles:
    put:
      tags:
        - articles
      summary: Update an existing article
      description: Update an existing article by Id
      operationId: updateArticle
      requestBody:
        description: Update an existent Article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid ID supplied
        '404':
          description: Article not found
        '405':
          description: Validation exception
      security:
        - article_auth:
            - write:articles
            - read:articles
    post:
      tags:
        - articles
      summary: Add a new article
      description: Add a new article
      operationId: addArticle
      requestBody:
        description: Create a new article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        '405':
          description: Invalid input
      security:
        - article_auth:
            - write:articles
            - read:articles
  /articles/findByStatus:
    get:
      tags:
        - articles
      summary: Finds Articles by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findArticlesByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: enabled
            enum:
              - enabled
              - disabled
              - soft_deleted
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '400':
          description: Invalid status value
      security:
        - articlestore_auth:
            - write:articles
            - read:articles
  /articles/findByTags:
    get:
      tags:
        - articles
      summary: Finds Articles by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findArticlesByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '400':
          description: Invalid tag value
      security:
        - articlestore_auth:
            - write:articles
            - read:articles
  /articles/{articleId}:
    get:
      tags:
        - articles
      summary: Find article by ID
      description: Returns a single article
      operationId: getArticleById
      parameters:
        - name:  articleId
          in: path
          description: ID of article to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid ID supplied
        '404':
          description: Article not found
      security:
        - api_key: []
        - articlestore_auth:
            - write:articles
            - read:articles
    patch:
      tags:
        - articles
      summary: Updates a article in the store with form data
      description: ''
      operationId: updateArticleWithForm
      parameters:
        - name: articleId
          in: path
          description: ID of article that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of article that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of article that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - articlestore_auth:
            - write:articles
            - read:articles
    delete:
      tags:
        - articles
      summary: Deletes a article
      description: delete a article
      operationId: deleteArticle
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: articleId
          in: path
          description: Article id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid article value
      security:
        - article_auth:
            - write:articles
            - read:articles
  /articles/{articleId}/uploadImage:
    post:
      tags:
        - articles
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: articleId
          in: path
          description: ID of article to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - articlestore_auth:
            - write:articles
            - read:articles
  /users:
    post:
      tags:
        - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /users/login:
    get:
      tags:
        - users
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - users
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /users/{username}:
    get:
      tags:
        - users
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - users
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Article:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: article status
          enum:
            - enabled
            - disabled
            - soft_deleted
      xml:
        name: article
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Article:
      description: Article object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Article'
        application/xml:
          schema:
            $ref: '#/components/schemas/Article'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    article_Auth:
      type: apiKey
      name: api_key
      in: header
